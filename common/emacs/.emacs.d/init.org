#+TITLE: Vinícius's Emacs Configuration
#+AUTHOR: Vinícius Simões
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP: content

* First-time initialization

If you are using this configuration for the first time, you
should put the following code on =.emacs.d/init.el=. It is
responsible for bootstrapping the entire thing. Notice that
it is not tangled along with the rest!

#+begin_src emacs-lisp :tangle no
    (require 'org)

    (setq vc-follow-symlinks t)

    (find-file (concat user-emacs-directory "init.org"))
    (org-babel-tangle)
    (rename-file "init.el" (expand-file-name "init.el" user-emacs-directory) t)
    (load-file (concat user-emacs-directory "init.el"))
    (byte-compile-file (concat user-emacs-directory "init.el"))
#+end_src

* Preparation
** Boostrapping

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-

  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-name) "init.org")
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (rename-file "init.el" (expand-file-name "init.el" user-emacs-directory) t)
        (byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'tangle-init)
#+end_src

** Packaging
*** Prepare packages managers.

#+begin_src emacs-lisp
     (require 'package)

     (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                              ("melpa" . "https://melpa.org/packages/")
                              ("elpy" . "http://jorgenschaefer.github.io/packages/")
                              ("org" . "https://orgmode.org/elpa/")))

     (package-initialize)

     (when (not package-archive-contents)
       (package-refresh-contents))
#+end_src

*** Install use-package

#+begin_src emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (require 'use-package)
     (require 'use-package-ensure)
     (setq use-package-always-ensure t)

#+end_src

** Custom
*** Define private and temp directories

#+begin_src emacs-lisp
  (defconst private-dir (expand-file-name "private" user-emacs-directory))
  (defconst temp-dir (format "%s/cache" private-dir))

  (unless (file-exists-p private-dir)
    (make-directory private-dir :parents))

  (unless (file-exists-p temp-dir)
    (make-directory temp-dir :parents))
#+end_src

*** Define and load custom-file

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name (concat private-dir "/custom.el")))

  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))

  (load custom-file)
#+end_src

*** UTF-8

#+begin_src emacs-lisp
      (set-charset-priority 'unicode)
      (set-terminal-coding-system  'utf-8)   ; pretty
      (set-keyboard-coding-system  'utf-8)   ; pretty
      (set-selection-coding-system 'utf-8)   ; please
      (prefer-coding-system        'utf-8)   ; with sugar on top
      (setq default-process-coding-system '(utf-8-unix . utf-8-unix)
            locale-coding-system          'utf-8)
#+end_src

*** Variables

#+begin_src emacs-lisp
  (setq confirm-kill-emacs                  'y-or-n-p
        confirm-nonexistent-file-or-buffer  t
        save-interprogram-paste-before-kill t
        mouse-yank-at-point                 t
        require-final-newline               t
        visible-bell                        nil
        ring-bell-function                  'ignore

        ;; http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html
        minibuffer-prompt-properties
        '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt)

        ;; Disable non selected window highlight
        cursor-in-non-selected-windows     nil
        highlight-nonselected-windows      nil

        ;; PATH
        exec-path                          (append exec-path '("/usr/local/bin/"))

        inhibit-startup-message            t
        fringes-outside-margins            t
        select-enable-clipboard            t

        ;; Backups enabled, use nil to disable
        history-length                     1000
        backup-inhibited                   nil
        make-backup-files                  t
        auto-save-default                  t
        auto-save-list-file-name           (concat temp-dir "/autosave")
        make-backup-files                  t
        create-lockfiles                   nil
        backup-directory-alist            `((".*" . ,(concat temp-dir "/backup/")))
        auto-save-file-name-transforms    `((".*" ,(concat temp-dir "/backup/") t))

        ;; smooth scroling
        mouse-wheel-follow-mouse           t
        scroll-margin                      1
        scroll-step                        1
        scroll-conservatively              10000
        scroll-preserve-screen-position    nil

        bookmark-save-flag                 t
        bookmark-default-file              (concat temp-dir "/bookmarks")

        ;; increase gc size
        gc-cons-threshold                  100000000

        ;; increase the amount of data which Emacs reads from the process
        read-process-output-max            (* 1024 1024))

  (setq-default fill-column                80
                indent-tabs-mode           nil
                sh-basic-offset            2
                save-place                 t)
#+end_src
*** Hooks
#+begin_src emacs-lisp
  (defun vs/line-numbers ()
    "Display line numbers."
    (display-line-numbers-mode 1)
    (hl-line-mode 1))

  (defun vs/font-lock ()
    "Font lock keywords."
    (font-lock-add-keywords
     nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\)"
            1 font-lock-warning-face t))))

  ;; Enable ANSI colors on compilation mode
  (require 'ansi-color)

  (defun vs/colorize-compilation ()
    "Colorize from `compilation-filter-start' to `point'."
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region
       compilation-filter-start (point))))

  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'prog-mode-hook 'vs/line-numbers)
  (add-hook 'text-mode-hook 'vs/line-numbers)
  (add-hook 'prog-mode-hook 'vs/font-lock)
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'compilation-filter-hook
            #'vs/colorize-compilation)
#+end_src
*** Remap yes-no
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Windmove
#+begin_src emacs-lisp
  (windmove-default-keybindings)
#+end_src
*** Server
#+begin_src emacs-lisp
  (require 'server)
  (when (and (fboundp 'server-running-p)
             (not (server-running-p)))
    (server-start))
#+end_src
*** Global auto revert mode
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

* Functions
** Split and switch

#+begin_src emacs-lisp
  (defun vs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun vs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (other-window 1))
#+end_src

** Format buffers stuff

*** StandardJS

#+begin_src emacs-lisp
  (defun vs/format-standardjs-buffer (&optional begin end)
    "Formart js buffer according standardjs, BEGIN region and END region."
    (interactive "r")
    (let ((temp-point (point)))
      (when (executable-find "standard")
        (call-shell-region
         (if (region-active-p) begin (point-min))
         (if (region-active-p) end (point-max))
         "standard --stdin --fix"
         t
         (current-buffer))
        (goto-char (point-min))
        (when (search-forward "standard:" nil t)
          (beginning-of-line)
          (delete-region (point) (point-max)))
        (goto-char temp-point))))

#+end_src

*** XML

#+begin_src emacs-lisp
  (defun vs/format-xml-buffer (&optional begin end)
    "Format xml buffer using xmllint, BEGIN region and END region."
    (interactive "r")
    (when (executable-find "xmllint")
      (let ((curr-point (point)))
        (call-shell-region
         (if (region-active-p) begin (point-min))
         (if (region-active-p) end (point-max))
         "xmllint --nowarning --format -"
         t
         (current-buffer))
        (goto-char curr-point))))
#+end_src

** Scratch Buffers
#+begin_src emacs-lisp
  (eval-when-compile (require 'dash))

  (defun vs/scratch-buffer (open-new-frame)
    "Open generic scratch buffer"
    (interactive "P")
    (let ((selected-mode (completing-read
                          "Scratch buffer with mode: "
                          (->> auto-mode-alist
                               (-filter (-compose 'not 'listp 'cdr))
                               (-map (-compose 'symbol-name 'cdr))
                               (delete-dups)))))
      (when open-new-frame
        (select-frame
         (make-frame)))
      (switch-to-buffer
       (get-buffer-create (concat "*" selected-mode "*")))
      (funcall (intern selected-mode))))
#+end_src
** Sudo edit
#+begin_src emacs-lisp
  (defun sudo-edit (&optional arg)
    (interactive "p")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:" (read-file-name "File: ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+end_src
** Indent buffer

#+begin_src emacs-lisp
  (defun vs/indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))
#+end_src

** Move lines

#+begin_src emacs-lisp
  (defun vs/move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  (defun vs/move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))
#+end_src

** Duplicate line

#+begin_src emacs-lisp
  (defun vs/duplicate-current-line (&optional n)
    "Duplicate current line, make more than 1 copy given a N argument."
    (interactive "p")
    (save-excursion
      (let ((current-line (thing-at-point 'line)))
        (when (or (= 1 (forward-line 1)) (eq (point) (point-max)))
          (insert "\n"))

        ;; now insert as many time as requested
        (while (> n 0)
          (insert current-line)
          (decf n)))))
#+end_src

** Shell command without newline
#+begin_src emacs-lisp
  (defun vs/sh-cmd-to-string (cmd)
    "Execute shell CMD and remove newline of output."
    (shell-command-to-string
     (concat "printf %s \"$(" cmd ")\"")))
#+end_src

* Keybindings
** Ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
** Indent buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c i") 'vs/indent-buffer)
#+end_src
** Mouse scroll
#+begin_src emacs-lisp
  (global-set-key (kbd "<mouse-4>")   'scroll-down-line)
  (global-set-key (kbd "<mouse-5>")   'scroll-up-line)
  (global-set-key (kbd "<C-mouse-4>") 'scroll-down-command)
  (global-set-key (kbd "<C-mouse-5>") 'scroll-up-command)
#+end_src
** Remap search forward
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x s") 'isearch-forward)
#+end_src
** Resize Windows
#+begin_src emacs-lisp
  (global-set-key (kbd "M-<down>") 'enlarge-window)
  (global-set-key (kbd "M-<up>") 'shrink-window)
  (global-set-key (kbd "M-<left>") 'enlarge-window-horizontally)
  (global-set-key (kbd "M-<right>") 'shrink-window-horizontally)
#+end_src
** Split and switch
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x 2") 'vs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'vs/split-window-right-and-switch)
#+end_src
** Scratch Buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c s b") 'vs/scratch-buffer)
#+end_src
** Move lines
#+begin_src emacs-lisp
  (global-set-key (kbd "M-S-<up>") 'vs/move-line-up)
  (global-set-key (kbd "M-S-<down>") 'vs/move-line-down)
#+end_src
** Duplicate Line
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-d") 'vs/duplicate-current-line)
#+end_src
** Hippie Expand

#+begin_src emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

* Appearence
** Frame config

My custom frame config.

#+begin_src emacs-lisp
  (defconst vs/frame-alist
    '((font . "JetBrainsMono-11")
      (scroll-bar . -1)
      (height . 60)
      (width . 95)
      (alpha . 100)
      (vertical-scrollbars . nil)))

  (setq default-frame-alist vs/frame-alist)
#+end_src

** Theme

My custom themes

#+begin_src emacs-lisp
  (use-package dracula-theme
    :config (load-theme 'dracula t))
#+end_src

** Modeline

Telephone-line.

#+begin_src emacs-lisp :tangle no
  (use-package telephone-line
    :config (telephone-line-mode 1))
#+end_src

Doom modeline.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :hook (doom-modeline-mode . size-indication-mode) ; filesize in modeline
    :hook (doom-modeline-mode . column-number-mode)   ; cursor column in modeline
    :init
    (unless after-init-time
      ;; prevent flash of unstyled modeline at startup
      (setq-default mode-line-format nil))
    (setq doom-modeline-project-detection 'project)
    ;; Set these early so they don't trigger variable watchers
    (setq doom-modeline-bar-width 3
          doom-modeline-github nil
          doom-modeline-mu4e nil
          doom-modeline-persp-name nil
          doom-modeline-minor-modes nil
          doom-modeline-major-mode-icon t
          doom-modeline-vcs-max-length 40
          doom-modeline-buffer-file-name-style 'truncate-with-project)

    ;; Fix modeline icons in daemon-spawned graphical frames. We have our own
    ;; mechanism for disabling all-the-icons, so we don't need doom-modeline to do
    ;; it for us. However, this may cause unwanted padding in the modeline in
    ;; daemon-spawned terminal frames. If it bothers you, you may prefer
    ;; `doom-modeline-icon' set to `nil'.
    (when (daemonp)
      (setq doom-modeline-icon t))
    :config
    (add-hook 'doom-load-theme-hook #'doom-modeline-refresh-bars)

    (add-hook '+doom-dashboard-mode-hook #'doom-modeline-set-project-modeline))
#+end_src

** Custom

My UI customizations

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t
        inhibit-splash-screen t
        mouse-wheel-follow-mouse t
        scroll-step 1
        scroll-conservatively 101)

  (show-paren-mode 1)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

* Extensions
** Ace Window

Jump between open windows.

#+begin_src emacs-lisp
  (use-package ace-window
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+end_src

** All the icons

Emacs icons.

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

** All the icons Dired

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook ((dired-mode . all-the-icons-dired-mode)))
#+end_src

** Avy

Jump to any visible character.

#+begin_src emacs-lisp
  (use-package avy
    :bind (("C-;" . 'avy-goto-char)))
#+end_src

** Company

Code completion for emacs

#+begin_src emacs-lisp
  (use-package company
    :commands (company-complete-common company-manual-begin company-grab-line)
    :init
    (setq company-idle-delay 0.25
          company-minimum-prefix-length 2
          company-tooltip-limit 14
          company-tooltip-align-annotations t
          company-require-match 'never
          company-global-modes '(not erc-mode message-mode help-mode gud-mode)
          company-frontends '(company-pseudo-tooltip-frontend
                              company-echo-metadata-frontend)

          ;; Buffer-local backends will be computed when loading a major mode, so
          ;; only specify a global default here.
          company-backends '(company-capf)

          ;; These auto-complete the current selection when
          ;; `company-auto-complete-chars' is typed. This is too magical. We
          ;; already have the much more explicit RET and TAB.
          company-auto-commit nil
          company-auto-commit-chars nil

          ;; Only search the current buffer for `company-dabbrev' (a backend that
          ;; suggests text your open buffers). This prevents Company from causing
          ;; lag once you have a lot of buffers open.
          company-dabbrev-other-buffers nil
          ;; Make `company-dabbrev' fully case-sensitive, to improve UX with
          ;; domain-specific words with particular casing.
          company-dabbrev-ignore-case nil
          company-dabbrev-downcase nil)
    :bind (("C-." . company-complete))
    :config (global-company-mode 1))
#+end_src

*** Company Quickhelp
#+begin_src emacs-lisp
  (use-package company-quickhelp
    :after company
    :config (company-quickhelp-mode 1))
#+end_src

*** Company Box
#+begin_src emacs-lisp
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

** CSV
#+begin_src emacs-lisp
  (use-package csv-mode
    :mode ("\\.csv$")
    :hook ((csv-mode . csv-align-mode)))
#+end_src
** Dashboard

Emacs awesome dashboard!

#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)
                            (bookmarks . 5)
                            (agenda . 5))
          dashboard-set-file-icons t
          dashboard-set-heading-icons t
          dashboard-startup-banner 'logo
          dashboard-center-content t
          initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    :config
    (dashboard-setup-startup-hook))
#+end_src
** DAP

Debugger Adapter Protocol for Emacs

#+begin_src emacs-lisp
  (use-package dap-mode
    :bind (:map dap-mode-map
                (("<f12>" . dap-debug)
                 ("S-<f12>" . dap-hydra)))
    :hook ((after-init . dap-auto-configure-mode)
           (python-mode . (lambda () (require 'dap-python)))
           (java-mode . (lambda () (require 'dap-java)))
           ((c-mode c++-mode) . (lambda () (require 'dap-lldb)))
           (php-mode . (lambda () (require 'dap-php)))
           (elixir-mode . (lambda () (require 'dap-elixir)))
           ((js-mode js2-mode typescript-mode) . (lambda () (require 'dap-chrome)))
           (rust-mode . (lambda () (require 'dap-gdb-lldb)))))
#+end_src

*** posframe

#+begin_src emacs-lisp
  (use-package posframe)
#+end_src

*** activate minor modes when stepping through code

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t -*-
  (define-minor-mode +dap-running-session-mode
    "A mode for adding keybindings to running sessions"
    nil
    nil
    (make-sparse-keymap)
    (when +dap-running-session-mode
      (let ((session-at-creation (dap--cur-active-session-or-die)))
        (add-hook 'dap-terminated-hook
                  (lambda (session)
                    (when (eq session session-at-creation)
                      (+dap-running-session-mode -1)))))))

  ;; Activate this minor mode when dap is initialized
  (add-hook 'dap-session-created-hook '+dap-running-session-mode)

  ;; Activate this minor mode when hitting a breakpoint in another file
  (add-hook 'dap-stopped-hook '+dap-running-session-mode)

  ;; Activate this minor mode when stepping into code in another file
  (add-hook 'dap-stack-frame-changed-hook (lambda (session)
                                            (when (dap--session-running session)
                                              (+dap-running-session-mode 1))))
#+end_src

** Delight
#+begin_src emacs-lisp
  (use-package delight)
#+end_src
** Dired Sidebar

#+begin_src emacs-lisp
  (use-package dired-sidebar
    :commands (dired-sidebar-toggle-sidebar)
    :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
    :custom ((dired-sidebar-theme 'icons)
             (dired-sidebar-subtree-line-prefix "  ")
             (dired-sidebar-should-follow-file t)
             (dired-sidebar-one-instance-p t))
    :config (progn (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
                   (push 'rotate-windows dired-sidebar-toggle-hidden-commands))
    :hook ((dired-sidebar-mode .  (lambda ()
                                    (unless (file-remote-p default-directory)
                                      (auto-revert-mode))))))
#+end_src

** Docker
#+begin_src emacs-lisp
  (use-package docker
    :bind ("C-c d" . docker))
#+end_src

** Dump Jump

Jump to definition polyglot.

#+begin_src emacs-lisp
  (use-package dumb-jump
    :config (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src
** Editorconfig

#+begin_src emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1))
#+end_src
** Expand Region

#+begin_src emacs-lisp
  (use-package expand-region
    :bind
    ("C-=" . er/expand-region))
#+end_src

** Exec path from shell

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-copy-env "GOPATH")
      (exec-path-from-shell-copy-env "PYTHONPATH")
      (exec-path-from-shell-initialize)))
#+end_src

** ERedis
Redis client
#+begin_src emacs-lisp
  (use-package eredis)
#+end_src

** Flycheck

Syntax checker for emacs.

#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode 1))
#+end_src

** Ivy Stuff

Ivy, a generic completion mechanism for Emacs.
Swiper, an Ivy-enhanced alternative to isearch.

#+begin_src emacs-lisp
  (use-package ivy
    :defer 0.1
    :bind ("C-s" . swiper)
    :init (setq ivy-use-virtual-buffers t)
    :config (ivy-mode 1))
#+end_src

Counsel, a collection of Ivy-enhanced versions of common Emacs commands.

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode 1)
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-x c k" . counsel-yank-pop)
           ("C-x c r" . counsel-rg)
           ("<f1> f" . counsel-describe-function)
           ("<f1> v" . counsel-describe-variable)
           ("<f1> l" . counsel-load-library)
           ("<f2> i" . counsel-info-lookup-symbol)
           ("<f2> u" . counsel-unicode-char)
           ("C-x C-r" . counsel-recentf)))
#+end_src

Ivy Hydra, for anothers options, such as multiple select.

#+begin_src emacs-lisp
  (use-package ivy-hydra)
#+end_src

*** Ivy rich

#+begin_src emacs-lisp
  (use-package ivy-rich
    :after ivy
    :config (ivy-rich-mode 1))
#+end_src

*** Counsel projectile

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :bind
    ("C-x v" . counsel-projectile)
    ("C-x c p" . counsel-projectile-rg))
#+end_src

** LSP

Language Server Protocol for Emacs.

#+begin_src emacs-lisp
  (defconst vs/lsp-ignore-files
    '("\\.asdf" "[/\\\\]\\.elixir_ls$"
      "[/\\\\]deps$" "[/\\\\]_build$"))

  (setq lsp-keymap-prefix "H-l")

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :bind (:map lsp-mode-map
                ("M-RET" . lsp-execute-code-action))
    :config (setq lsp-auto-guess-root t
                  lsp-file-watch-threshold 8000
                  lsp-file-watch-ignored
                  (-concat vs/lsp-ignore-files
                           lsp-file-watch-ignored)
                  lsp-rust-server 'rust-analyzer
                  lsp-idle-delay 0.500
                  lsp-modeline-diagnostics-scope :project
                  lsp-keep-workspace-alive nil)
    :hook ((lsp-mode . lsp-enable-which-key-integration)
           (prog-mode . lsp-deferred)))
#+end_src

*** LSP UI

#+begin_src emacs-lisp
  (use-package lsp-ui
    :commands lsp-ui-mode
    :bind (:map lsp-ui-mode-map
                ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                ([remap xref-find-references] . lsp-ui-peek-find-references))
    :custom ((lsp-ui-doc-include-signature t)
             (lsp-ui-doc-enable nil)
             (lsp-ui-peek-enable nil)
             (lsp-ui-sideline-enable nil)))
#+end_src

*** Ivy LSP

#+begin_src emacs-lisp
  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol)
#+end_src

** Magit

Magic git client!

#+begin_src emacs-lisp
  (use-package magit
    :if (executable-find "git")
    :init
    (setq magit-completing-read-function 'ivy-completing-read)
    :bind ("C-x g" . magit-status))
#+end_src

*** Git gutter

#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :config (global-git-gutter-mode))
#+end_src

** Multiple cursors

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind
    ("C-S-c C-S-c" . mc/edit-lines)
    ("M-n" . mc/mark-next-like-this)
    ("M-p" . mc/mark-previous-like-this)
    ("C-c x" . mc/mark-all-like-this))
#+end_src

** Nov
Ebook reader

#+begin_src emacs-lisp
  (use-package nov
    :mode ("\\.epub$" . nov-mode))
#+end_src

** Password Store
Pass extension

#+begin_src emacs-lisp
  (use-package password-store)
#+end_src

** Polymode
#+begin_src emacs-lisp
  (use-package polymode
    :mode ("\\.ex$" . poly-elixir-web-mode)
    :config (progn
              ;; Elixir + web
              (define-hostmode poly-elixir-hostmode :mode 'elixir-mode)
              (define-innermode poly-liveview-expr-elixir-innermode
                :mode 'web-mode
                :head-matcher (rx line-start (* space) "~L" (= 3 (char "\"'")) line-end)
                :tail-matcher (rx line-start (* space) (= 3 (char "\"'")) line-end)
                :head-mode 'host
                :tail-mode 'host
                :allow-nested nil
                :keep-in-mode 'host
                :fallback-mode 'host)
              (define-polymode poly-elixir-web-mode
                :hostmode 'poly-elixir-hostmode
                :innermodes '(poly-liveview-expr-elixir-innermode))
              (setq web-mode-engines-alist '("elixir" . "\\.ex\\'"))))
#+end_src

** Projectile

Project managment.

#+begin_src emacs-lisp
  (use-package projectile
    :custom
    ((projectile-known-projects-file
      (expand-file-name "projectile-bookmarks.eld" temp-dir))
     (projectile-completion-system 'ivy)
     (projectile-globally-ignored-directories
      '("node_modules" ".git" ".svn" "deps" "_build")))
    :bind-keymap ("C-c p" . projectile-command-map)
    :bind (("C-," . projectile-find-file))
    :config (projectile-mode +1))
#+end_src

*** Projectile ripgrep

#+begin_src emacs-lisp
  (use-package projectile-ripgrep
    :after projectile)
#+end_src

** Quickrun

Quickrun buffer.

#+begin_src emacs-lisp
  (use-package quickrun
    :bind (([f5] . quickrun)))
#+end_src

** Ripgrep

#+begin_src emacs-lisp
  (use-package ripgrep)
#+end_src

** Smartparens

Smart parentheses

#+begin_src emacs-lisp
  (use-package smartparens
    :config (progn
              (require 'smartparens-config)
              (smartparens-global-mode t)))
#+end_src

** Smex

Command history

#+begin_src emacs-lisp
  (use-package smex)
#+end_src

** Shell pop

#+begin_src emacs-lisp
  (use-package shell-pop
    :config (custom-set-variables
             '(shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
             '(shell-pop-universal-key "<f7>")
             '(shell-pop-window-size 30)
             '(shell-pop-full-span t)
             '(shell-pop-window-position "bottom")))
#+end_src

** Try

Try out packages in emacs without installing them

#+begin_src emacs-lisp
  (use-package try)
#+end_src

** Undo tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    ;; Remember undo history
    (setq
     undo-tree-auto-save-history nil
     undo-tree-history-directory-alist `(("." . ,(concat temp-dir "/undo/"))))
    :config
    (global-undo-tree-mode 1))
#+end_src

** VLF

View large files

#+begin_src emacs-lisp
  (use-package vlf
    :config (require 'vlf-setup))
#+end_src
** WCheck
#+begin_src emacs-lisp
  (use-package wcheck-mode
    :init (setq wcheck-language-data
                '(("en"
                   (program . "/usr/bin/nuspell")
                   (args "-l" "-d" "en_US" )
                   (action-program . "/usr/bin/nuspell")
                   (action-args "-a" "-d" "en_US")
                   (action-parser . wcheck-parser-ispell-suggestions))
                  ("pt-BR"
                   (program . "/usr/bin/nuspell")
                   (args "-l" "-d" "pt_BR")
                   (action-program . "/usr/bin/nuspell")
                   (action-args "-a" "-d" "pt_BR")
                   (action-parser . wcheck-parser-ispell-suggestions))))
    :bind (("C-c s c" . wcheck-mode)
           ("C-c s l" . wcheck-change-language)
           :map wcheck-mode-map
           ("<H-return>" . wcheck-actions)))
#+end_src
** Wich key

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src
** Xclip

#+begin_src emacs-lisp
  (use-package xclip
    :if (executable-find "xclip")
    :config (xclip-mode))
#+end_src
** Yasnippet

Snippets in emacs

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (progn
      (setq yas-snippet-dirs (append
                              yas-snippet-dirs
                              (list
                               (concat user-emacs-directory "snippets/"))))
      (yas-global-mode 1)))
#+end_src

Yasnippet snippet pack

#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :after (yas-global-mode))
#+end_src
* Programming Languages
** Ansible
#+begin_src emacs-lisp
  (use-package ansible
    :after yaml-mode
    :hook (yaml-mode . ansible)
    :bind
    (:map ansible-key-map
          ("C-c C-d" . ansible-doc)))
#+end_src
*** Ansible doc
#+begin_src emacs-lisp
  (use-package ansible-doc
    :hook ansible-mode
    :bind
    (:map ansible-doc-module-mode-map
          ("C-x C-s" . ignore)))
#+end_src
*** Ansible company
#+begin_src emacs-lisp
  (use-package company-ansible
    :hook ansible-mode)
#+end_src
** Csharp
#+begin_src emacs-lisp
  (use-package csharp-mode
    :mode ("\\.cs$"))
#+end_src
** Clojure
#+begin_src emacs-lisp
  (use-package clojure-mode
    :mode ("\\.clj$"))
#+end_src
*** Cider
#+begin_src emacs-lisp
  (use-package cider)
#+end_src
** Dart

#+begin_src emacs-lisp
  (use-package dart-mode
    :mode ("\\.dart$")
    :init (setq dart-format-on-save t))
#+end_src

*** lsp Dart

#+begin_src emacs-lisp
  (use-package lsp-dart)
#+end_src

** Docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :mode ("\\Dockerfile$" . dockerfile-mode))

  (use-package docker-compose-mode)
#+end_src
** Erlang
#+begin_src emacs-lisp
  (use-package erlang
    :mode "\\.erl$")
#+end_src
** Elixir

#+begin_src emacs-lisp
  (use-package elixir-mode
    :mode ("\\.ex$" "\\.exs$" "mix.lock")
    :hook ((elixir-mode . emmet-mode)))
#+end_src

*** Exunit

#+begin_src emacs-lisp
  (use-package exunit
    :after (elixir-mode)
    :bind (:map elixir-mode-map
                (("C-c , a" . exunit-verify-all)
                 ("C-c , A" . exunit-verify-all-in-umbrella)
                 ("C-c , s" . exunit-verify-single)
                 ("C-c , v" . exunit-verify)
                 ("C-c , r" . exunit-rerun))))
#+end_src

*** Ob Elixir

#+begin_src emacs-lisp
    (use-package ob-elixir
      :after (elixir-mode))
#+end_src

** Elm
#+begin_src emacs-lisp
  (use-package elm-mode
    :mode ("\\.elm$")
    :config (add-to-list 'company-backends 'company-elm))
#+end_src

** Golang
#+begin_src emacs-lisp
  (use-package go-mode
    :mode ("\\.go$"))
#+end_src
** Graphql
#+begin_src emacs-lisp :results output
  (use-package graphql-mode
    :mode ("\\.graphql$" "\\.gql$"))
#+end_src
** Groovy
#+begin_src emacs-lisp
  (use-package groovy-mode
    :mode ("\\.groovy$"))
#+end_src

** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :hook ((haskell-mode . haskell-indentation-mode)
           (haskell-mode . interactive-haskell-mode))
    :custom ((haskell-font-lock-symbols t)))
#+end_src

*** LSP Haskell
#+begin_src emacs-lisp
  (use-package lsp-haskell)
#+end_src

** Java
#+begin_src emacs-lisp
  (use-package cc-mode)

  (use-package java-mode
    :ensure nil
    :mode ("\\.java$")
    :config (progn
              (c-set-style "cc-mode")
              (setq tab-width 4
                    indent-tabs-mode t
                    c-basic-offset 4)))
#+end_src

*** LSP Java
#+begin_src emacs-lisp
  (use-package lsp-java
    :after lsp)
#+end_src

** JavaScript

#+begin_src emacs-lisp
  (use-package js2-mode
    :delight "EcmaScript"
    :hook ((js-mode . js2-minor-mode)
           (js2-mode . prettify-symbols-mode)
           (js2-mode . js2-imenu-extras-mode)
           (js2-mode . rjsx-minor-mode))
    :interpreter (("node" . js2-mode)
                  ("node" . js2-jsx-mode))
    :mode ("\\.js$" . js2-mode)
    :init (setq js2-include-node-externs t
                js2-highlight-level 3
                js2-strict-missing-semi-warning nil
                indent-tabs-mode nil
                js-indent-level 2
                js2-basic-offset 2)
    :custom ((js2-mode-show-parse-errors nil)
             (js2-mode-show-strict-warnings nil)
             (js2-bounce-indent-p t)))
#+end_src

*** JS2 refactor

#+begin_src emacs-lisp
  (use-package js2-refactor
    :after (js2-mode)
    :hook ((js2-mode . js2-refactor-mode))
    :bind (:map js2-mode-map
                ("C-k" . js2r-kill))
    :config
    (js2r-add-keybindings-with-prefix "C-c j r"))
#+end_src

*** Mocha

Run Mocha tests.

#+begin_src emacs-lisp
  (use-package mocha
    :init (setq mocha-reporter "spec")
    :bind (:map js2-mode-map
                (("C-c t" . mocha-test-project))))
#+end_src

** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :mode
    ("\\.json$" . json-mode))
#+end_src
** Kotlin
#+begin_src emacs-lisp
  (use-package kotlin-mode
    :hook ((kotlin-mode . lsp)))
#+end_src
** Lisp
#+begin_src emacs-lisp
  (use-package slime
    :mode
    ("\\.lisp$" . slime-mode)
    :init
    (setq inferior-lisp-program "/usr/bin/sbcl"
          slime-net-coding-system 'utf-8-unix
          slime1-contribs '(slime-fancy)))

#+end_src
** LaTeX
#+begin_src emacs-lisp
  (use-package tex-mode
    :hook ((TeX-mode . flyspell-mode))
    :ensure auctex)

  (use-package auctex
    :ensure t
    :defer t)

  (use-package auctex-latexmk
    :custom ((auctex-latexmk-inherit-TeX-PDF-mode t))
    :config (auctex-latexmk-setup))
#+end_src
** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :commands (markdown-mode gfm-mode)
    :custom ((markdown-command "pandoc --from markdown --to html --ascii")))
#+end_src

*** Markdown format

#+begin_src emacs-lisp
  (use-package markdownfmt
    :after markdown-mode
    :hook (markdown-mode . markdownfmt-enable-on-save)
    :bind (:map markdown-mode-map
                ("C-c C-f" . markdownfmt-format-buffer)))
#+end_src
** Nginx
#+begin_src emacs-lisp
  (use-package nginx-mode)
#+end_src
** Org
Defining where the Org files will be stored.

#+begin_src emacs-lisp
  (defconst vs/org-directory
    (if (file-directory-p "~/Sync/org/") "~/Sync/org/" "~/"))
#+end_src

My Org capture templates.

#+begin_src emacs-lisp
  (defconst vs/org-capture-templates
    '(("t" "todo" entry (file org-default-notes-file)
       "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
      ("m" "Meeting" entry (file org-default-notes-file)
       "* MEETING with %? :MEETING:\n%t" :clock-in t :clock-resume t)
      ("d" "Diary" entry (file+datetree (concat vs/org-directory "diary.org"))
       "* %?\n%U\n" :clock-in t :clock-resume t)
      ("i" "Idea" entry (file org-default-notes-file)
       "* %? :IDEA: \n%t" :clock-in t :clock-resume t)
      ("n" "Next Task" entry (file+headline org-default-notes-file "Tasks")
       "** NEXT %? \nDEADLINE: %t")))
#+end_src

My Org structure templates.

#+begin_src emacs-lisp
  (defconst vs/org-structure-template-alist
    '(("n" . "notes")
      ("a" . "export ascii")
      ("c" . "center")
      ("C" . "comment")
      ("e" . "example")
      ("E" . "export")
      ("h" . "export html")
      ("l" . "export latex")
      ("q" . "quote")
      ("s" . "src")
      ("v" . "verse")))
#+end_src

Org mode latest version.

#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :hook ((org-mode . toggle-word-wrap)
           (org-mode . org-indent-mode)
           (org-mode . turn-on-visual-line-mode)
           (org-mode . (lambda () (display-line-numbers-mode -1)))
           (org-mode . auto-fill-mode))
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :init (setq org-directory vs/org-directory
                org-default-notes-file (concat org-directory "notes.org")
                org-agenda-files (list (concat org-directory "work.org")
                                       (concat org-directory "personal.org"))
                org-confirm-babel-evaluate nil
                org-src-fontify-natively t
                org-log-done 'time
                org-babel-sh-command "bash"
                org-capture-templates vs/org-capture-templates
                org-structure-template-alist vs/org-structure-template-alist
                org-use-speed-commands t)
    :config (org-babel-do-load-languages
             'org-babel-load-languages
             (org-babel-do-load-languages
              'org-babel-load-languages
              (append org-babel-load-languages
                      '((emacs-lisp . t)
                        (python . t)
                        (verb . t)
                        (js . t)
                        (shell . t)
                        (plantuml . t)
                        (sql . t)
                        (elixir . t)
                        (ruby . t)
                        (dot . t)
                        (latex . t)))))
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append))
#+end_src

*** Org Bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook ((org-mode . org-bullets-mode))
    :init
    (setq org-hide-leading-stars t))
#+end_src

*** Org Download
#+begin_src emacs-lisp
  (use-package org-download
    :hook (dired-mode . org-download-enable))
#+end_src

*** Org + Reveal.js

#+begin_src emacs-lisp
  (use-package org-re-reveal
    :init (setq org-re-reveal-root "https://cdn.jsdelivr.net/reveal.js/latest"
                org-reveal-mathjax t))
#+end_src

*** Org Verb
#+begin_src emacs-lisp
  (use-package verb
    :after org
    :config (define-key org-mode-map (kbd "C-c C-r") verb-command-map))
#+end_src
*** Org Babel Async

Turn code evaluation async.

#+begin_src emacs-lisp
  (use-package ob-async
    :init (setq ob-async-no-async-languages-alist '("ipython")))
#+end_src
*** Org notify
#+begin_src emacs-lisp
  (require 'org-notify)
  (org-notify-start 60)

  (org-notify-add 'default
                  '(:time "10m" :period "2m" :duration 25 :actions -notify/window)
                  '(:time "1h" :period "15m" :duration 25 :actions -notify/window)
                  '(:time "2h" :period "30m" :duration 25 :actions -notify/window))
#+end_src
*** Org Epub
Export Org file to Epub file.

#+begin_src emacs-lisp
  (use-package ox-epub)
#+end_src
*** Org Pandoc
#+begin_src emacs-lisp
  (use-package ox-pandoc)
#+end_src
*** Latex

Abntex2 class

#+begin_src emacs-lisp
  (add-to-list 'org-latex-classes
               '("abntex2"
                 "\\documentclass{abntex2}
                    [NO-DEFAULT-PACKAGES]
                    [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                 ("\\maketitle" . "\\imprimircapa")))
#+end_src

Source code highlight with Minted package.

#+begin_src emacs-lisp
  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("latexmk -shell-escape -pdf -interaction=nonstopmode -file-line-error %f"))
#+end_src

** PlantUML
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :mode ("\\.plantuml\\'" . plantuml-mode)
    :config
    (let ((plantuml-directory (concat user-emacs-directory "private/"))
        (plantuml-link "http://sourceforge.net/projects/plantuml/files/plantuml.jar/download"))
    (let ((plantuml-target (concat plantuml-directory "plantuml.jar")))
      (if (not (file-exists-p plantuml-target))
          (progn (message "Downloading plantuml.jar")
                 (shell-command
                  (mapconcat 'identity (list "wget" plantuml-link "-O" plantuml-target) " "))
                 (kill-buffer "*Shell Command Output*")))
      (setq org-plantuml-jar-path plantuml-target
            plantuml-jar-path plantuml-target
            plantuml-output-type "svg"))))
#+end_src
*** Flycheck plantuml
#+begin_src emacs-lisp
  (use-package flycheck-plantuml
    :config (flycheck-plantuml-setup))
#+end_src
** Python
#+begin_src emacs-lisp
  (use-package python
    :mode ("\\.py" . python-mode)
    :config (setq python-shell-interpreter "ipython"
                  python-shell-interpreter-args "-i --simple-prompt"))
#+end_src

*** LSP Python MS
#+begin_src emacs-lisp
  (use-package lsp-python-ms
    :custom ((lsp-python-ms-auto-install-server t)))
#+end_src

** TOML
#+begin_src emacs-lisp
  (use-package toml-mode
    :mode ("\\.toml$" . toml-mode))
#+end_src
** TypeScript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode ("\\.ts$" . typescript-mode))
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :init (setq rust-format-on-save t
                company-tooltip-align-annotations t))
#+end_src
*** Flycheck Rust
#+begin_src emacs-lisp
  (use-package flycheck-rust
    :after rust-mode
    :hook ((rust-mode . flycheck-rust-setup)))
#+end_src
*** Cargo
#+begin_src emacs-lisp
  (use-package cargo
    :hook ((rust-mode . cargo-minor-mode)))
#+end_src
** Web
#+begin_src emacs-lisp
  (defun my-web-mode-hook ()
      "Hook for `web-mode' config for company-backends."
      (set (make-local-variable 'company-backends)
           '((company-css company-web-html company-files))))

  (use-package web-mode
    :bind (("C-c ]" . emmet-next-edit-point)
           ("C-c [" . emmet-prev-edit-point)
           ("C-c o b" . browse-url-of-file))
    :hook ((web-mode . my-web-mode-hook))
    :mode
    (("\\.html?\\'" . web-mode)
     ("\\.njk?\\'" . web-mode)
     ("\\.phtml?\\'" . web-mode)
     ("\\.tpl\\.php\\'" . web-mode)
     ("\\.[agj]sp\\'" . web-mode)
     ("\\.as[cp]x\\'" . web-mode)
     ("\\.erb\\'" . web-mode)
     ("\\.mustache\\'" . web-mode)
     ("\\.djhtml\\'" . web-mode)
     ("\\.mjml\\'" . web-mode)
     ("\\.eex\\'" . web-mode)
     ("\\.leex\\'" . web-mode))
    :init   (setq web-mode-markup-indent-offset 2
                   web-mode-css-indent-offset 2
                   web-mode-code-indent-offset 2
                   web-mode-enable-current-element-highlight t))
#+end_src
*** CSS
#+begin_src emacs-lisp
  (defun my-css-mode-hook ()
    (set (make-local-variable 'company-backends)
         '((company-css company-dabbrev-code company-files))))

  (use-package css-mode
    :hook ((css-mode . my-css-mode-hook)))
#+end_src
*** Company web
#+begin_src emacs-lisp
  (use-package company-web
    :after web-mode)
#+end_src
*** Emmet
#+begin_src emacs-lisp
  (use-package emmet-mode
    :init (setq emmet-move-cursor-between-quotes t) ;; default nil
    :hook ((web-mode . emmet-mode)
           (vue-mode . emmet-mode)
           (rjsx-mode . emmet-mode)
           (rjsx-minor-mode . emmet-mode)))
#+end_src
*** Pug
#+begin_src emacs-lisp
  (use-package pug-mode
    :mode ("\\.pug?\\'" . pug-mode))
#+end_src
*** React
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :mode ("\\.jsx$" . rjsx-mode))
#+end_src
*** Vue
#+begin_src emacs-lisp
  (use-package vue-mode
    :mode
    ("\\.vue$" . vue-mode))
#+end_src
** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode ("\\.yaml|.yml$" . yaml-mode))
#+end_src
